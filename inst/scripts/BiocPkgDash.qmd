---
title: "Bioconductor Package Dashboard"
format:
  dashboard:
    orientation: columns
logo: https://bioconductor.org/images/logo_bioconductor.gif
theme: minty
server: shiny
---

```{r}
#| context: setup
library(BiocPkgDash)
library(shinytoastr)
```

# {.sidebar}

```{r}
radioButtons(
    inputId = "biocver",
    label = "Bioconductor version:",
    choices = c("release", "devel"),
    selected = "release"
)
textInput(
    inputId = "email",
    label = "Enter maintainer e-mail",
    placeholder = "maintainer@bioconductor.org"
)
actionButton(
    inputId = "submit",
    label = "Submit",
    class = "btn-primary"
)
```

-------------------------------------------------------------------------------

Download the badge wall as an HTML fragment for your website:

```{r}
#| output: asis

## downloadButton currently not working
## https://github.com/quarto-dev/quarto-cli/issues/999
## using workaround
## https://github.com/rstudio/shiny/issues/2392#issuecomment-484097398
(downloadButton(
    outputId = "btnSend",
    label = "Download HTML"
))
```

# Badges

## Column {width="80%"}

```{r}
#| title: Wall of Badges
DT::dataTableOutput("badge_out")
```

## Column {width="20%"}

```{r}
#| label: all-values
#| results: hide

## use placeholder email for now
pkgs <- BiocPkgTools::biocMaintained(
    main = "maintainer@bioconductor\\.org",
    pkgType = c("software", "data-experiment", "workflow")
)
tot_pkgs <- length(unique(pkgs[["Package"]]))

## use placeholder package for now
dl_month <- BiocPkgTools::pkgDownloadStats("GenomicRanges")
total_dl <- prettyNum(
    sum(dl_month[["Nb_of_distinct_IPs"]]),
    big.mark = ",",
    scientific = FALSE
)

## use placeholder package for now
deps <- BiocPkgTools::pkgBiocDeps("GenomicRanges", which = "all")
total_deps <- length(unlist(deps))
```

```{r}
#| component: valuebox
#| title: Total Packages

list(
    color = "primary",
    value = tot_pkgs
)
```

```{r}
#| component: valuebox
#| title: Total Downloads of GenomicRanges

list(
    color = "secondary",
    value = total_dl
)
```

```{r}
#| component: valuebox
#| title: Total No. of Dependencies

list(
    color = "warning",
    value = total_deps
)
```

# Status

## Column {width="80%"}

```{r}
#| title: Package Status Plot
plotly::plotlyOutput("status_out")
```

# Data

## Column {height="80%"}

```{r}
#| title: Packages Maintained
DT::dataTableOutput("data_out")
```

# Status Table

## Column {height="80%"}

```{r}
#| title: Package Status Table
DT::dataTableOutput("status_table")
```


```{r}
#| context: server
emailValue <- reactiveVal("maintainer@bioconductor.org")

main_data <- reactive({
    tryCatch({
        BiocPkgDash:::renderMaintained(
            email = emailValue(),
            version = input$biocver
        )
    }, error = function(e) {
        shinytoastr::toastr_error(
            conditionMessage(e), "Invalid e-mail address", timeOut = 3000
        )
    })
})

observeEvent(input$submit, {
    emailValue(input[["email"]])
})

output$badge_out <- DT::renderDataTable({
    DT::datatable(
        BiocPkgDash:::badgesDF(
            data = main_data()
        ),
        escape = FALSE,
        rownames = FALSE,
        options = list(
            dom = "ftp",
            pageLength = 20,
            lengthChange = FALSE,
            paging = TRUE
        )
    )
})

output$btnSend <- downloadHandler(
    filename = function() {
        em <- gsub("@", "_at_", emailValue())
        em <- gsub("\\.", "_dot_", em)
        paste0(em, ".html")
    },
    content = function(file) {
        BiocPkgDash:::renderHTMLfrag(
            file = file, data = main_data()
        )
    }
)

output$data_out <- DT::renderDataTable({
    DT::datatable(
        main_data()[, c(
            "Package", "Version", "License", "NeedsCompilation", "Title",
            "hasREADME", "hasNEWS", "hasINSTALL", "hasLICENSE",
            "dependencyCount"
        )],
        rownames = FALSE,
        options = list(
            dom = "ftp",
            pageLength = 20,
            paging = TRUE
        )
    )
})

output$status_out <- plotly::renderPlotly(
    BiocPkgDash::pkgStatusPlot(
        version = input$biocver,
        data = main_data()
    )
)

output$status_table <- DT::renderDataTable({
    DT::datatable(
        BiocPkgDash::pkgStatusTable(
            version = input$biocver,
            data = main_data()
        ),
        escape = FALSE,
        rownames = FALSE,
        options = list(
            dom = "ftp",
            pageLength = 20,
            lengthChange = FALSE,
            paging = TRUE
        )
    )
})

```
